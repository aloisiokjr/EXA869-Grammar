"Name" = 'Final_Grammar' 
"Author" = 'EXA869-P02'
"Version" = '1.0'
"Start Symbol" = <Start>
               
! ------------------------------------------------------------------------------------------------------------------------- SETS                   
{String Chars} = {Printable} + {HT} - ["]

! ------------------------------------------------------------------------------------------------------------------------- TERMINALS

{String Chars} = {Printable} + {HT} + {LF} + {CR} - ["\]
               
Identifier = {Letter}({AlphaNumeric} | [_])*

RealNumber = {Digit}+ '.' {Digit}+
       
IntegerNumber = {Digit}{Digit}*
       
CadeCaracters = '"' ( {String Chars} | '\' {Printable} )* '"'
              
Type  = ('int' | 'real' | 'boolean' | 'string')
         
Unary_Operators = ( '++' | '--' )
                
Logical_Operators = ( '&&' | '||' )
                   
RelationalMorePrec = ( '>' | '<' | '>=' | '<=' )
                   
RelationalLessPrec = ( '==' | '!=' )
                   
Plus_Minus = ( '+' | '-' )
           
Times_division = ( '*' | '/' )
               
<Number> ::= IntegerNumber | RealNumber
                   
! ------------------------------------------------------------------------------------------------------------------------- RULES
!Escopo Global

<Start> ::= <Global Values> <Functions_Procedures>

! -------------------------------------------------------------------------------------------------------------------------                
!Declaração de constantes e variáeis                
<Global Values> ::= 'const' '{' <Const Values Declaration> '}' 'var' '{' <Var Values Declaration> '}'
                  | 'var' '{' <Var Values Declaration> '}' 'const' '{' <Const Values Declaration> '}'
                  | <>

! -------------------------------------------------------------------------------------------------------------------------                 
!Declaração de valores de constantes         
<Const Values Declaration> ::= Type <Const Values Attribution> <Const More Attributions> ';' <Const Values Declaration>
                             | <>
                            
<Const More Attributions> ::= ',' <Const Values Attribution> <Const More Attributions>
                            | <>
                           
<Const Values Attribution> ::= Identifier '=' <Value Const>  
                                              
<Value Const> ::= <Number> | CadeCaracters | 'true' | 'false'

! -------------------------------------------------------------------------------------------------------------------------         
!Declaração de valores de variaveis     
<Var Values Declaration> ::= Type <Var Values Attribution> <Var More Attributions> ';' <Var Values Declaration>
                           | 'typedef' 'struct' <IDE_Struct> <Var Values Declaration>
                           | 'struct' <IDE_Struct> <Var Values Declaration>
                           | <>
                          
<Var More Attributions> ::= ',' <Var Values Attribution> <Var More Attributions>
                          | <>
                         
<Var Values Attribution> ::= Identifier <Array Verification>                          
                          
<Array Verification> ::= '['IntegerNumber']' <Array Verification> 
                       | <>                     

<IDE_Struct> ::= Identifier <IDE_Struct2>
              
<IDE_Struct2> ::= '{' 'var' <Var Values Declaration> '}' ';' 
                | 'extends' Identifier '{' 'var' <Var Values Declaration> '}' ';'
                  
! -------------------------------------------------------------------------------------------------------------------------                          
!Escopo para a declaração de funções e procedimentos                 
<Functions_Procedures> ::= 'function' Type Identifier '(' <Param List> ')' '{' 'var' '{' <Var Values Declaration> '}' <Commands> <Return> '}' <Functions_Procedures>
                         | 'procedure' Identifier '(' <Param List> ')' '{' 'var' '{' <Var Values Declaration> '}' <Commands> '}' <Functions_Procedures>
                         | <>

!Escopo da lista de parâmetros
<Param List> ::= Type Identifier <More Param>
               | <>
              
<More Param> ::= ',' <Param List>
               | <>

! -------------------------------------------------------------------------------------------------------------------------              
!Escopo de comandos possíveis para funções e procedimentos                
<Commands> ::= <If Statement> <Commands> | <While Statement> <Commands> | <Read Statement> <Commands> | <Print Statement> <Commands>
             | <Assignment> <Commands> | <Call Procedure> <Commands> | <>

! -------------------------------------------------------------------------------------------------------------------------                      
!Escopo para expressões
<Expression> ::= <LogicalExp>

<LogicalExp> ::= <RelationalExp> Logical_Operators <LogicalExp>
               | '(' <LogicalExp> ')'
               | <RelationalExp>

<RelationalExp> ::= <AritmeticExp> <InequalExp> <EqualExp>                  
               
<EqualExp> ::= RelationalLessPrec <AritmeticExp> <InequalExp> <EqualExp>
             | <>

<InequalExp> ::= RelationalMorePrec <AritmeticExp> <InequalExp> 
               | <> 
                         
<AritmeticExp> ::= <Operation> <OpSum>
                 | '(' <RelationalExp> ')'
                 
<Operation> ::= <OpUnary> <OpMultiplication>

<OpSum> ::= Plus_Minus <Operation> <OpSum>
          | <>
           
<OpMultiplication> ::= Times_division <OpUnary> <OpMultiplication>
                     | <>
                    
<OpUnary> ::= Unary_Operators '(' <AritmeticExp> ')'
            | '!' <Call Variable>
            | '(' <AritmeticExp> ')'

<Call Variable> ::= 'global' '.' Identifier
                  | 'local' '.' Identifier
                  | Identifier
              
! -------------------------------------------------------------------------------------------------------------------------
!Estrutura do if/else
<If Statement> ::= 'if' '('<Expression>')' 'then' '{'<Commands>'}' <Else Statement>
                
<Else Statement> ::= 'else' '{'<Commands>'}' | <>
              
! -------------------------------------------------------------------------------------------------------------------------
!Estrutura do while
<while Statement> ::= 'while' '('<Expression>')' '{'<Commands>'}'         
                   
! -------------------------------------------------------------------------------------------------------------------------
!Estrutura do read
<Read Statement> ::= read '('<Read Params>')' ';'
                  
<Read Params> ::= <Array Param> <More Read Params>
                | <CompositeType Param> <More Read Params>
                | <Call Variable> <More Read Params>
                | <>

<More Read Params> ::= ',' <Read Params>
                     | <>
                  
! -------------------------------------------------------------------------------------------------------------------------
!Estrutura do print
<Print Statement> ::= print '('<Print Params>')' ';'
                   
<Print Params> ::= CadeCaracters <More Print Params>
                 | <Array Param> <More Print Params>
                 | <Call Variable> <More Print Params>
                 | <CompositeType Param> <More Print Params>
                 | <>

<More Print Params> ::= ',' <Print Params>
                      | <>
                    
<Argument Array> ::= IntegerNumber | <Call Variable>

<Array Param> ::= Identifier '[' <Argument Array> ']' <More Array Column>

<More Array Column> ::= '[' <Argument Array> ']' <More Array Column> | <>

<CompositeType Param> ::= Identifier <Array Verification> '.' Identifier <Array Verification>
                   
! -------------------------------------------------------------------------------------------------------------------------
!Escopo da atribuição
<Assignment> ::= 'global' '.' <AssignmentID>
               | 'local' '.' <AssignmentID>
               | <AssignmentID>
               
<AssignmentID> ::= Identifier <Struct>
               
<Struct> ::= '.' Identifier <Struct3>
           | <MatrAssign> <Struct2>
           
<Struct3> ::= <MatrAssign> <Struct2>
                       
<Struct2> ::= '=' <Assign2>
            | Unary_Operators
           
<Assign2> ::= 'global' '.' Identifier <MatrAssign>
            | 'local' '.' Identifier <MatrAssign>
            | Identifier <NotVar> 
            | <Value Param>
            | <Expression>

<NotVar> ::= '.' Identifier <MatrAssign>
           | '(' <Value Assignment> <ListArg> ')'
           | <>

<ListArg> ::= ',' <Value Assignment> <ListArg>
            | <>
              
<MatrAssign> ::= '[' <MatrAssign2>
               | <>
               
<MatrAssign2> ::= <Number> ']' <MatrAssign>
                | Identifier ']' <MatrAssign>
                
<Value Assignment> ::= <Value Param>
                     | <Call Variable>
               
! -------------------------------------------------------------------------------------------------------------------------
!Chamada de procedimentos
<Call Procedure> ::= Identifier '('<Real Param List>')' ';'

<Real Param List> ::= <Value Param> <More Real Param>
                    | <Call Variable> <More Real Param>
                    | <Array Param> <More Real Param>
                    | <CompositeType Param> <More Real Param>
                    | <>
                
<More Real Param> ::= ',' <Real Param List>
                    | <>
                   
<Value Param> ::= <Number> | CadeCaracters | 'true' | 'false'
         
! -------------------------------------------------------------------------------------------------------------------------
!Chamada do retorno
                   
<Return> ::= 'return' <Return Values> ';'
          
<Return Values> ::= <Call Variable>
                  | <Number> 
                  | CadeCaracters 
                  | 'true' 
                  | 'false'
                  | <Expression>
